language: bash

cache:
  directories:
    - $HOME/miniconda3

before_cache:
  - rm -rf $CONDA_DIR/pkgs/cache
  - rm -rf $CONDA_DIR/envs/pandera
  - rm -rf $CONDA_DIR/envs/pandera-core
  - rm -rf $CONDA_DIR/conda-meta/history
  - touch $CONDA_DIR/conda-meta/history

os:
  - linux
  - osx
  - windows

env:
  - PYTHON_VERSION=3.6 ENV_FILE=ci/environment_pandas_latest.yml
  - PYTHON_VERSION=3.7 ENV_FILE=ci/environment_pandas_latest.yml
  - PYTHON_VERSION=3.8 ENV_FILE=ci/environment_pandas_latest.yml
  - PYTHON_VERSION=3.9 ENV_FILE=ci/environment_pandas_latest.yml
  - PYTHON_VERSION=3.6 ENV_FILE=ci/environment_pandas_0_25_3.yml
  - PYTHON_VERSION=3.7 ENV_FILE=ci/environment_pandas_0_25_3.yml
  - PYTHON_VERSION=3.8 ENV_FILE=ci/environment_pandas_0_25_3.yml
  - PYTHON_VERSION=3.9 ENV_FILE=ci/environment_pandas_0_25_3.yml

before_install:
  - |
    export CONDA_DIR="$HOME/miniconda3"
    if [ "${TRAVIS_OS_NAME}" == "windows" ]; then
        export CONDA_DIR=`cygpath -w $CONDA_DIR`
        export CONDA_BIN_DIR="$CONDA_DIR\scripts"
    else
        export CONDA_BIN_DIR="$CONDA_DIR/bin"
    fi
    export PATH="$CONDA_BIN_DIR:$PATH"

install:
  # Install Conda
  - |
    if [ "${TRAVIS_OS_NAME}" == "windows" ]; then
        choco install openssl.light
    fi

    if [ -d "$CONDA_DIR" ] && [ -e "$CONDA_BIN_DIR/conda" ]; then
        echo "Miniconda install already present from cache: $CONDA_DIR"
        rm -rf $CONDA_DIR/envs/*  # Just in case...
    else
        echo "Installing Miniconda..."
        rm -rf $CONDA_DIR  # Just in case...

        if [ "${TRAVIS_OS_NAME}" == "windows" ]; then
            wget https://repo.continuum.io/miniconda/Miniconda3-latest-Windows-x86_64.exe -O miniconda.exe || exit 1
            cmd //c "start /wait "" miniconda.exe /S /D=$CONDA_DIR"
        else
            if [ "${TRAVIS_OS_NAME}" == "osx" ]; then
                wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh || exit 1
            elif [ "${TRAVIS_OS_NAME}" == "linux" ]; then
                wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh || exit 1
            fi
            bash miniconda.sh -b -p "$CONDA_DIR" || exit 1
        fi
    fi

    echo "Configuring Miniconda..."
    conda config --set ssl_verify false || exit 1
    conda config --set always_yes true --set changeps1 false || exit 1

    echo "Updating Miniconda..."
    conda update conda
    conda update --all
    conda info -a || exit 1
  # Setup Conda Envs
  - |
    conda create -n pandera python=$PYTHON_VERSION || exit 1
    conda env update -n pandera -f $ENV_FILE
    conda create -n pandera-core python=$PYTHON_VERSION || exit 1
    conda env update -n pandera-core -f $ENV_FILE
    conda list
  - source activate pandera && pip install .[all]
  - source activate pandera-core && pip install .

script:
  # Dependencies
  # Test minimal installation
  - source activate pandera-core && pytest
  # Test full installation
  - source activate pandera
  # Check that requirements-dev.text is generated exclusively by environment.yml
  - python ./scripts/generate_pip_deps_from_conda.py --compare
  # Formatting
  - isort --check-only pandera tests
  - black --check pandera tests
  # Linting
  - |
    if [ "${PYTHON_VERSION}" == "3.9" ]; then
        # https://github.com/PyCQA/pylint/issues/776
        pylint pandera tests --disable=unsubscriptable-object
    else
        pylint pandera tests
    fi
  # Type checking
  - mypy pandera tests
  # Tests
  - pytest -s --cov=pandera tests/
  # Coverage
  - codecov
  # Check docs can build, treating warnings as errors
  - python -m sphinx -E -b=doctest "docs/source" "docs/_build"
